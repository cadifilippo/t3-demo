import {
  SignInButton,
  SignOutButton,
  UserButton,
  useUser,
} from "@clerk/nextjs";
import { type NextPage } from "next";
import Head from "next/head";
import { useState } from "react";
import { api } from "~/utils/api";
import type { RouterOutputs } from "../utils/api";
import Image from "next/image";
import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";

dayjs.extend(relativeTime);

const CreatePostWizard = () => {
  const { user } = useUser();
  const [input, setInput] = useState("");
  console.log(user);
  // const ctx = api.useContext();

  // const { mutate, isLoading: isPosting } = api.posts.create.useMutation({
  //   onSuccess: () => {
  //     setInput("");
  //     void ctx.posts.getAll.invalidate();
  //   },
  //   onError: (e) => {
  //     const errorMessage = e.data?.zodError?.fieldErrors.content;
  //     if (errorMessage && errorMessage[0]) {
  //       toast.error(errorMessage[0]);
  //     } else {
  //       toast.error("Failed to post! Please try again later.");
  //     }
  //   },
  // });

  if (!user) return null;

  return (
    <div className="flex w-full gap-3">
      <Image
        src={user.profileImageUrl}
        className="h-12 w-12 rounded-full"
        alt="user profile image"
        width={56}
        height={56}
      />
      {/* <UserButton
        appearance={{
          elements: {
            userButtonAvatarBox: {
              width: 56,
              height: 56,
            },
          },
        }}
      /> */}
      <input
        placeholder="Type some emojis!"
        className="grow bg-transparent outline-none"
        type="text"
        value={input}
        onChange={(e) => setInput(e.target.value)}
        // onKeyDown={(e) => {
        //   if (e.key === "Enter") {
        //     e.preventDefault();
        //     if (input !== "") {
        //       mutate({ content: input });
        //     }
        //   }
        // }}
        // disabled={isPosting}
      />
      {/* {input !== "" && !isPosting && (
        <button onClick={() => mutate({ content: input })}>Post</button>
      )} */}
      {/* {isPosting && (
        <div className="flex items-center justify-center">
          <LoadingSpinner size={20} />
        </div>
      )} */}
    </div>
  );
};

type PostWithAuthor = RouterOutputs["posts"]["getAll"][number];

const PostView = ({ post, author }: PostWithAuthor) => {
  return (
    <div key={post.id} className="border-b border-slate-400 p-8">
      <div>
        <Image
          src={author.profileImageUrl}
          className="h-12 w-12 rounded-full"
          alt={`${author.username} profile image`}
          width={56}
          height={56}
        />
        <span>{`@${author.username}`}</span>
        <span className="font-thin">{` Â· ${dayjs(
          post.createdAt
        ).fromNow()}`}</span>
      </div>
      <span>{post.content}</span>
    </div>
  );
};

const Home: NextPage = () => {
  const user = useUser();
  const { data, isLoading } = api.posts.getAll.useQuery();

  if (isLoading) return <div>Loading...</div>;

  if (!data) return <div>Something went wrong</div>;

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex h-screen justify-center">
        <div className="w-full border-x border-slate-200 md:max-w-2xl">
          <div className="flex border-b border-slate-400 p-4">
            {!user?.isSignedIn ? (
              <SignInButton mode="modal">
                <button className="btn flex justify-center">Sign in</button>
              </SignInButton>
            ) : (
              <SignOutButton>
                <button className="btn flex justify-center">Sign out</button>
              </SignOutButton>
            )}

            {user?.isSignedIn && <CreatePostWizard />}
          </div>
          <div className="flex flex-col">{data?.map(PostView)}</div>
        </div>
      </main>
    </>
  );
};

export default Home;
